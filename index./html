<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Solar System Command</title>
    <!-- NEW: Sci-fi font from Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Exo+2:wght@300;400;600&display=swap" rel="stylesheet">
    <style>
        body {
            margin: 0; background-color: #000; color: #fff;
            font-family: 'Exo 2', sans-serif; /* NEW: Applying the new font */
            overflow: hidden;
        }
        canvas { display: block; }
        
        /* --- NEW STYLISH MENU --- */
        #side-menu {
            position: fixed; top: 0; left: 0; height: 100%; width: 340px;
            background: linear-gradient(to bottom, rgba(16, 24, 40, 0.9), rgba(10, 15, 25, 0.95));
            border-right: 1px solid rgba(0, 191, 255, 0.2);
            transform: translateX(0); transition: transform 0.4s cubic-bezier(0.23, 1, 0.32, 1);
            display: flex; flex-direction: column; z-index: 100; backdrop-filter: blur(10px);
        }
        #side-menu.collapsed { transform: translateX(-340px); }
        #menu-toggle {
            position: absolute; top: 50%; left: 100%; transform: translateY(-50%); width: 25px; height: 50px;
            background: inherit; border: 1px solid rgba(0, 191, 255, 0.2); border-left: none;
            border-top-right-radius: 8px; border-bottom-right-radius: 8px; cursor: pointer; display: flex;
            align-items: center; justify-content: center; color: #00bfff; font-size: 22px;
            transition: background-color 0.2s;
        }
        #menu-toggle:hover { background-color: rgba(0, 191, 255, 0.1); }
        #menu-content { padding: 0 25px; overflow-y: auto; flex-grow: 1; }
        .menu-section { margin-bottom: 30px; padding-top: 25px; }
        .menu-section h2 {
            margin-top: 0; font-size: 1.3em; color: #00bfff; border-bottom: 1px solid rgba(0, 191, 255, 0.3);
            padding-bottom: 8px; font-weight: 600; letter-spacing: 1px; text-transform: uppercase;
        }
        .menu-section label { display: block; margin: 20px 0 8px 0; font-size: 0.9em; font-weight: 400; color: #ccc; }
        
        /* Custom Stylish Slider */
        input[type=range] { -webkit-appearance: none; width: 100%; background: transparent; }
        input[type=range]::-webkit-slider-thumb {
            -webkit-appearance: none; height: 16px; width: 16px; border-radius: 50%; background: #00bfff;
            cursor: pointer; margin-top: -6px; box-shadow: 0 0 10px rgba(0, 191, 255, 0.7);
        }
        input[type=range]::-moz-range-thumb {
            height: 16px; width: 16px; border-radius: 50%; background: #00bfff;
            cursor: pointer; box-shadow: 0 0 10px rgba(0, 191, 255, 0.7);
        }
        input[type=range]::-webkit-slider-runnable-track {
            width: 100%; height: 4px; cursor: pointer; background: rgba(0, 191, 255, 0.2); border-radius: 5px;
        }
        input[type=range]::-moz-range-track {
            width: 100%; height: 4px; cursor: pointer; background: rgba(0, 191, 255, 0.2); border-radius: 5px;
        }
        
        /* Stylish Accordion Menu */
        .accordion-item .accordion-header {
            background: rgba(0, 30, 60, 0.3); color: #fff; border: 1px solid rgba(0, 191, 255, 0.1);
            border-left: 5px solid #555; padding: 12px 15px; border-radius: 4px; cursor: pointer;
            text-align: left; width: 100%; transition: all 0.2s; display: flex; justify-content: space-between; align-items: center;
        }
        .accordion-item .accordion-header:hover {
            background: rgba(0, 191, 255, 0.1); border-color: rgba(0, 191, 255, 0.3);
            box-shadow: 0 0 15px rgba(0, 191, 255, 0.2);
        }
        .accordion-item .accordion-header .arrow { transition: transform 0.3s; color: #00bfff; }
        .accordion-item.active .accordion-header .arrow { transform: rotate(90deg); }
        .accordion-content { max-height: 0; overflow: hidden; transition: max-height 0.3s ease-in-out; padding-left: 20px; border-left: 1px solid #444; margin: 5px 0 0 8px; }
        .moon-button { background: transparent; color: #ccc; border: none; font-size: 0.9em; padding: 8px 10px; text-align: left; width: 100%; cursor: pointer; border-radius: 4px; display: block; }
        .moon-button:hover { background: rgba(0, 191, 255, 0.1); color: #fff; }
        
        /* Stylish Info Panel */
        #info-panel-content { font-size: 0.9em; }
        #info-panel-content h3 { margin-bottom: 15px; color: #fdd835; font-size: 1.5em; font-weight: 600; text-transform: uppercase; letter-spacing: 1px;}
        #info-panel-content p { margin: 8px 0; display: flex; justify-content: space-between; border-bottom: 1px solid rgba(255,255,255,0.05); padding-bottom: 8px; }
        #info-panel-content span:first-child { color: #aaa; font-weight: 300; }
        #info-panel-content span:last-child { font-weight: 400; }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/@tweenjs/tween.js@21.0.0/dist/tween.umd.js"></script>
</head>
<body>

    <div id="side-menu">
        <div id="menu-toggle">&raquo;</div>
        <div id="menu-content">
            <div class="menu-section" id="info-section">
                <h2>SYSTEM DATA</h2>
                <div id="info-panel-content"><p>Select a celestial body to view its data.</p></div>
            </div>
            <div class="menu-section" id="controls-section">
                <h2>SIMULATION CONTROLS</h2>
                <label for="speed-slider">Time Acceleration: <span id="speed-value">1.0</span>x</label>
                <input type="range" id="speed-slider" min="0" max="10" value="3.5" step="0.1">
            </div>
            <div class="menu-section" id="navigation-section">
                <h2>NAVIGATION</h2>
                <div id="navigation-buttons"></div>
            </div>
        </div>
    </div>

    <canvas id="solar-system-canvas"></canvas>

    <script type="importmap">{ "imports": { "three": "https://cdn.jsdelivr.net/npm/three@0.165.0/build/three.module.js", "three/addons/": "https://cdn.jsdelivr.net/npm/three@0.165.0/examples/jsm/" } }</script>
    
    <script type="module">
        import * as THREE from 'three';
        import { OrbitControls } from 'three/addons/controls/OrbitControls.js';

        // --- CORE SETUP & STATE ---
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.01, 30000);
        const renderer = new THREE.WebGLRenderer({ canvas: document.querySelector('#solar-system-canvas'), antialias: true });
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(window.innerWidth, window.innerHeight);
        
        const overviewPosition = new THREE.Vector3(0, 400, 1000);
        camera.position.copy(overviewPosition);

        const controls = new OrbitControls(camera, renderer.domElement);
        controls.enableDamping = true;

        let speedMultiplier = 1.0;
        let focusedBody = null;
        
        // --- LIGHTING ---
        scene.add(new THREE.PointLight(0xffffff, 4500000));
        scene.add(new THREE.AmbientLight(0xffffff, 0.1));
        
        // --- DATA ---
        const solarSystemData = [/* Data unchanged */
            { name: 'Sun', radius: 696340, color: 0xfff000 },
            { name: 'Mercury', radius: 2440, distance: 57.9, period: 88, color: 0x9f9f9f, inclination: 7.0, axialTilt: 0.03 },
            { name: 'Venus', radius: 6052, distance: 108.2, period: 224.7, color: 0xdab36d, inclination: 3.4, axialTilt: 177.4 },
            { name: 'Earth', radius: 6371, distance: 149.6, period: 365.2, color: 0x4f70a3, inclination: 0.0, axialTilt: 23.4, moons: [
                { name: 'Moon', radius: 1737, distance: 0.384, period: 27.3, color: 0xcccccc, inclination: 5.1 }
            ]},
            { name: 'Mars', radius: 3390, distance: 227.9, period: 687, color: 0xc1440e, inclination: 1.8, axialTilt: 25.2, moons: [
                { name: 'Phobos', radius: 11.2, distance: 0.0093, period: 0.3, color: 0x8f8f8f, inclination: 1.1 },
                { name: 'Deimos', radius: 6.2, distance: 0.0234, period: 1.26, color: 0xafafaf, inclination: 0.9 }
            ]},
            { name: 'Jupiter', radius: 69911, distance: 778.6, period: 4331, color: 0xc8ab89, inclination: 1.3, axialTilt: 3.1, moons: [
                { name: 'Io', radius: 1821, distance: 0.421, period: 1.77, color: 0xf3d649, inclination: 0.04 }, { name: 'Europa', radius: 1560, distance: 0.671, period: 3.55, color: 0x9f8f7f, inclination: 0.47 }, { name: 'Ganymede', radius: 2634, distance: 1.070, period: 7.15, color: 0x7b6e61, inclination: 0.2 }, { name: 'Callisto', radius: 2410, distance: 1.882, period: 16.7, color: 0x5b4f48, inclination: 0.2 }
            ]},
            { name: 'Saturn', radius: 58232, distance: 1433.5, period: 10747, color: 0xe3d9b1, inclination: 2.5, axialTilt: 26.7, moons: [
                { name: 'Titan', radius: 2575, distance: 1.221, period: 15.9, color: 0xf5ad6f, inclination: 0.33 }
            ]},
            { name: 'Uranus', radius: 25362, distance: 2872.5, period: 30589, color: 0xafdbd3, inclination: 0.8, axialTilt: 97.8 },
            { name: 'Neptune', radius: 24622, distance: 4495.1, period: 59800, color: 0x3d5a9c, inclination: 1.8, axialTilt: 28.3, moons: [
                { name: 'Triton', radius: 1353, distance: 0.354, period: 5.87, color: 0xceb4a7, inclination: 157.3 }
            ]},
        ];

        // --- SCALES & CONSTANTS ---
        const MASTER_SCALE = 1 / 4000;
        const LOG_DISTANCE_SCALE = 150;
        const BASE_ORBIT_SPEED = 0.05; // SLOWED DOWN base speed

        const celestialBodies = [];
        
        // --- OBJECT CREATION ---
        const sunData = solarSystemData.find(d => d.name === 'Sun');
        const sunVisualRadius = sunData.radius * MASTER_SCALE;
        const sunMesh = new THREE.Mesh(new THREE.SphereGeometry(sunVisualRadius, 64, 32), new THREE.MeshBasicMaterial({ color: sunData.color }));
        celestialBodies.push({ mesh: sunMesh, data: sunData, pivot: sunMesh });
        scene.add(sunMesh);

        solarSystemData.forEach(data => {
            if (data.name === 'Sun') return;
            const visualRadius = data.radius * MASTER_SCALE;
            const mesh = new THREE.Mesh(new THREE.SphereGeometry(visualRadius, 32, 16), new THREE.MeshStandardMaterial({ color: data.color, roughness: 0.9 }));
            const bodyObject = { mesh, data };
            celestialBodies.push(bodyObject);

            const orbitalPlane = new THREE.Object3D(); scene.add(orbitalPlane);
            orbitalPlane.rotation.x = THREE.MathUtils.degToRad(data.inclination);
            
            const pivot = new THREE.Object3D(); orbitalPlane.add(pivot);
            const scaledDistance = sunVisualRadius + Math.log10(data.distance) * LOG_DISTANCE_SCALE;
            mesh.position.x = scaledDistance;
            pivot.add(mesh);
            
            bodyObject.pivot = pivot; bodyObject.currentAngle = Math.random() * 2 * Math.PI;
            pivot.rotation.y = bodyObject.currentAngle;
            mesh.rotation.z = THREE.MathUtils.degToRad(data.axialTilt);

            const orbitColor = new THREE.Color(data.color).multiplyScalar(0.3);
            const orbit = new THREE.Mesh(new THREE.TorusGeometry(scaledDistance, 0.25, 16, 200), new THREE.MeshBasicMaterial({ color: orbitColor, side: THREE.DoubleSide }));
            orbit.rotation.x = Math.PI / 2; orbitalPlane.add(orbit);
            
            if (data.moons) {
                data.moons.forEach(moonData => {
                    const moonMesh = new THREE.Mesh(new THREE.SphereGeometry(moonData.radius * MASTER_SCALE, 16, 8), new THREE.MeshStandardMaterial({ color: moonData.color }));
                    const moonObject = { mesh: moonMesh, data: moonData };
                    celestialBodies.push(moonObject);

                    const moonOrbitalPlane = new THREE.Object3D(); mesh.add(moonOrbitalPlane);
                    moonOrbitalPlane.rotation.x = THREE.MathUtils.degToRad(moonData.inclination);

                    const moonPivot = new THREE.Object3D(); moonOrbitalPlane.add(moonPivot);
                    const moonOrbitRadius = (moonData.distance * 1e6) * MASTER_SCALE; // Unified scale
                    moonMesh.position.x = moonOrbitRadius;
                    moonPivot.add(moonMesh);

                    const moonOrbit = new THREE.Mesh(new THREE.TorusGeometry(moonOrbitRadius, 0.05, 16, 100), new THREE.MeshBasicMaterial({ color: 0xffffff, transparent: true, opacity: 0.2 }));
                    moonOrbit.rotation.x = Math.PI / 2; moonOrbitalPlane.add(moonOrbit);

                    moonObject.pivot = moonPivot; moonObject.currentAngle = Math.random() * 2 * Math.PI;
                    moonPivot.rotation.y = moonObject.currentAngle;
                });
            }
        });
        
        const saturnObject = celestialBodies.find(b => b.data.name === 'Saturn')?.mesh;
        if (saturnObject) {
            const innerRadius = saturnObject.geometry.parameters.radius * 1.2;
            const outerRadius = innerRadius * 2;
            const ringMesh = new THREE.Mesh(new THREE.RingGeometry(innerRadius, outerRadius, 64), new THREE.MeshBasicMaterial({ color: 0x999977, side: THREE.DoubleSide, transparent: true, opacity: 0.6 }));
            ringMesh.rotation.x = Math.PI / 2; saturnObject.add(ringMesh);
        }

        // --- UI & CAMERA ---
        const infoPanel = document.getElementById('info-panel-content');
        
        function updateInfoPanel(body) {
            const d = body.data; let html = `<h3>${d.name}</h3><p><span>Radius:</span> <span>${d.radius.toLocaleString()} km</span></p>`;
            if (d.axialTilt !== undefined) html += `<p><span>Axial Tilt:</span> <span>${d.axialTilt}°</span></p>`;
            if (d.period) {
                const parentName = solarSystemData.find(p => p.moons?.some(m => m.name === d.name))?.name || 'Sun';
                html += `<p><span>Orbital Period:</span> <span>${d.period.toLocaleString()} days</span></p>`;
                if(d.distance) html += `<p><span>Avg. Dist. from ${parentName}:</span> <span>${d.distance.toLocaleString()} million km</span></p>`;
                if(d.inclination !== undefined) html += `<p><span>Orbital Inclination:</span> <span>${d.inclination}°</span></p>`;
            }
            infoPanel.innerHTML = html;
        }

        function focusOnBody(targetBody) { focusedBody = targetBody; updateInfoPanel(targetBody); }
        function unlockCamera(isManual = false) {
            if (focusedBody) focusedBody = null;
            if (!isManual) {
                TWEEN.removeAll();
                new TWEEN.Tween(camera.position).to(overviewPosition, 1500).easing(TWEEN.Easing.Cubic.InOut).start();
                new TWEEN.Tween(controls.target).to(new THREE.Vector3(0,0,0), 1500).easing(TWEEN.Easing.Cubic.InOut).start();
                infoPanel.innerHTML = `<p>Select a celestial body to view its data.</p>`;
            }
        }
        
        controls.addEventListener('start', () => unlockCamera(true));

        const navContainer = document.getElementById('navigation-buttons');
        solarSystemData.forEach(planetData => {
            const accordionItem = document.createElement('div'); accordionItem.className = 'accordion-item';
            const header = document.createElement('button'); header.className = 'accordion-header';
            header.style.borderLeftColor = `#${new THREE.Color(planetData.color).getHexString()}`;
            header.innerHTML = `<span>${planetData.name}</span><span class="arrow">${planetData.moons ? '▸' : ''}</span>`;
            const content = document.createElement('div'); content.className = 'accordion-content';

            header.onclick = () => {
                const target = celestialBodies.find(b => b.data.name === planetData.name); focusOnBody(target);
                if(planetData.moons) {
                    const isActive = accordionItem.classList.contains('active');
                    document.querySelectorAll('.accordion-item.active').forEach(item => { item.classList.remove('active'); item.querySelector('.accordion-content').style.maxHeight = '0'; });
                    if (!isActive) { accordionItem.classList.add('active'); content.style.maxHeight = content.scrollHeight + "px"; }
                } else { document.querySelectorAll('.accordion-item.active').forEach(item => { item.classList.remove('active'); item.querySelector('.accordion-content').style.maxHeight = '0'; }); }
            };
            
            if (planetData.moons) {
                planetData.moons.forEach(moonData => {
                    const moonBtn = document.createElement('button'); moonBtn.className = 'moon-button';
                    moonBtn.textContent = moonData.name;
                    moonBtn.onclick = (e) => { e.stopPropagation(); const target = celestialBodies.find(b => b.data.name === moonData.name); focusOnBody(target); };
                    content.appendChild(moonBtn);
                });
            }
            accordionItem.appendChild(header); accordionItem.appendChild(content); navContainer.appendChild(accordionItem);
        });

        const speedSlider = document.getElementById('speed-slider');
        function updateSpeed() {
            const sliderValue = parseFloat(speedSlider.value);
            // NEW: Exponential speed scale for better control
            speedMultiplier = Math.pow(1.8, sliderValue) - 0.9;
            document.getElementById('speed-value').textContent = speedMultiplier.toFixed(1);
        }
        speedSlider.addEventListener('input', updateSpeed); updateSpeed();

        document.getElementById('menu-toggle').addEventListener('click', () => document.getElementById('side-menu').classList.toggle('collapsed'));
        window.addEventListener('resize', () => (camera.aspect = window.innerWidth / window.innerHeight, camera.updateProjectionMatrix(), renderer.setSize(window.innerWidth, window.innerHeight)));

        // --- ANIMATION LOOP ---
        const clock = new THREE.Clock();
        function animate(time) {
            requestAnimationFrame(animate); const delta = clock.getDelta(); TWEEN.update(time);

            celestialBodies.forEach(body => {
                if (!body.data.period) return;
                let selfRotSpeed = 0.5 * (focusedBody ? 0.2 : 1); // Slower self-rotation when focused
                if(body.data.name === 'Venus') selfRotSpeed = -selfRotSpeed;
                body.mesh.rotation.y += selfRotSpeed * delta;
                let angleChange = (1 / body.data.period) * BASE_ORBIT_SPEED * 100 * delta * speedMultiplier;
                if (body.data.name === 'Triton') angleChange = -angleChange;
                body.currentAngle += angleChange; body.pivot.rotation.y = body.currentAngle;
            });

            if (focusedBody) {
                const targetPosition = new THREE.Vector3(); focusedBody.mesh.getWorldPosition(targetPosition);
                const size = focusedBody.mesh.geometry.parameters.radius;
                const offsetDistance = Math.max(size * 10, size + 1);
                const offsetDirection = new THREE.Vector3(0.5, 0.5, 1).normalize();
                const desiredCameraPosition = targetPosition.clone().add(offsetDirection.multiplyScalar(offsetDistance));
                camera.position.lerp(desiredCameraPosition, 0.1);
                controls.target.lerp(targetPosition, 0.1);
            }
            
            controls.update(); renderer.render(scene, camera);
        }
        animate();
    </script>
</body>
</html>
